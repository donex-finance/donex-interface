/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { BigNumber, BigNumberish } from 'ethers'
import { Contract } from 'starknet'

export class UserPositionMgr extends Contract {
  initializer(
    owner: BigNumberish,
    swap_pool_hash: BigNumberish,
    swap_pool_proxy_hash: BigNumberish,
    name: BigNumber,
    symbol: BigNumber
  )
  get_token_position(token_id: BigNumberish): Promise<{
    pool_info: {
      token0: BigNumberish
      token1: BigNumberish
      fee: BigNumberish
    }
    position: {
      fee_growth_inside0_x128: {
        high: BigNumberish
        low: BigNumberish
      }
      fee_growth_inside1_x128: {
        high: BigNumberish
        low: BigNumberish
      }
      liquidity: BigNumberish
      pool_address: BigNumberish
      tick_lower: BigNumberish
      tick_upper: BigNumberish
      tokens_owed0: BigNumberish
      tokens_owed1: BigNumberish
    }
  }>

  get_pool_address(
    token0: BigNumberish,
    token1: BigNumberish,
    fee: BigNumberish
  ): Promise<{
    address: BigNumberish
  }>

  get_pool_cur_price(
    token0: BigNumberish,
    token1: BigNumberish,
    fee: BigNumberish
  ): Promise<{
    sqrt_price_x96: BigNumberish
    tick: BigNumberish
  }>

  get_position_token_amounts(token_id: BigNumberish): Promise<{
    token0_liquidity: BigNumberish
    token1_liquidity: BigNumberish
    tokens_owed0: BigNumberish
    tokens_owed1: BigNumberish
  }>

  get_exact_output(
    token_in: BigNumberish,
    token_out: BigNumberish,
    fee: BigNumberish,
    amount_out: BigNumberish
  ): Promise<{
    amount_in: BigNumberish
  }>

  get_exact_output_router(
    path_len: BigNumberish,
    path: BigNumberish[],
    amount_out: BigNumberish
  ): Promise<{
    amount_in: BigNumberish
  }>

  get_exact_input(
    token_in: BigNumberish,
    token_out: BigNumberish,
    fee: BigNumberish,
    amount_in: BigNumberish
  ): Promise<{
    amount_out: BigNumberish
  }>

  get_exact_input_router(
    path_len: BigNumberish,
    path: BigNumberish[],
    amount_in: BigNumberish
  ): Promise<{
    amount_out: BigNumberish
  }>

  create_and_initialize_pool(
    token0: BigNumberish,
    token1: BigNumberish,
    fee: BigNumberish,
    sqrt_price_x96: BigNumberish
  ): Promise<{
    pool_address: BigNumberish
  }>

  mint(
    recipient: BigNumberish,
    token0: BigNumberish,
    token1: BigNumberish,
    fee: BigNumberish,
    tick_lower: BigNumberish,
    tick_upper: BigNumberish,
    amount0_desired: BigNumberish,
    amount1_desired: BigNumberish,
    amount0_min: BigNumberish,
    amount1_min: BigNumberish,
    deadline: BigNumberish
  ): Promise<{
    amount0: BigNumberish
    amount1: BigNumberish
  }>

  increase_liquidity(
    token_id: BigNumberish,
    amount0_desired: BigNumberish,
    amount1_desired: BigNumberish,
    amount0_min: BigNumberish,
    amount1_min: BigNumberish,
    deadline: BigNumberish
  ): Promise<{
    liquidity: BigNumberish
    amount0: BigNumberish
    amount1: BigNumberish
  }>

  add_liquidity_callback(
    token0: BigNumberish,
    token1: BigNumberish,
    fee: BigNumberish,
    amount0: BigNumberish,
    amount1: BigNumberish,
    data: BigNumberish
  ): Promise<{}>

  decrease_liquidity(
    token_id: BigNumberish,
    liquidity: BigNumberish,
    amount0_min: BigNumberish,
    amount1_min: BigNumberish,
    deadline: BigNumberish
  ): Promise<{
    amount0: BigNumberish
    amount1: BigNumberish
  }>

  collect(
    token_id: BigNumberish,
    recipient: BigNumberish,
    amount0_max: BigNumberish,
    amount1_max: BigNumberish
  ): Promise<{
    amount0: BigNumberish
    amount1: BigNumberish
  }>

  burn(token_id: BigNumberish): Promise<{}>

  exact_input(
    token_in: BigNumberish,
    token_out: BigNumberish,
    fee: BigNumberish,
    recipient: BigNumberish,
    amount_in: BigNumberish,
    sqrt_price_limit: BigNumberish,
    amount_out_min: BigNumberish,
    deadline: BigNumberish
  ): Promise<{
    amount_out: BigNumberish
  }>

  exact_input_router(
    path_len: BigNumberish,
    path: BigNumberish[],
    recipient: BigNumberish,
    amount_in: BigNumberish,
    amount_out_min: BigNumberish,
    deadline: BigNumberish
  ): Promise<{
    amount_out: BigNumberish
  }>

  exact_output(
    token_in: BigNumberish,
    token_out: BigNumberish,
    fee: BigNumberish,
    recipient: BigNumberish,
    amount_out: BigNumberish,
    sqrt_price_limit: BigNumberish,
    amount_in_max: BigNumberish,
    deadline: BigNumberish
  ): Promise<{
    amount_in: BigNumberish
  }>

  exact_output_router(
    path_len: BigNumberish,
    path: BigNumberish[],
    recipient: BigNumberish,
    amount_out: BigNumberish,
    amount_in_max: BigNumberish,
    deadline: BigNumberish
  ): Promise<{
    amount_in: BigNumberish
  }>
}
